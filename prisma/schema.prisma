// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile data
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  passwordHash  String
  isVerified    Boolean  @default(false)
  phone         String?
  company       String?
  bio           String?
  website       String?
  avatar        String?
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  verificationCodes VerificationCode[]
  serviceRequests   ServiceRequest[]
  sessions          Session[]

  @@map("users")
}

// Verification codes for email verification
model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  type      VerificationType
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@map("verification_codes")
}

// User sessions for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Service requests from the forms
model ServiceRequest {
  id          String      @id @default(cuid())
  type        ServiceType
  status      RequestStatus @default(PENDING)
  
  // Contact information
  name        String
  email       String
  phone       String?
  company     String?
  
  // Service-specific data (stored as JSON)
  serviceData Json
  
  // Additional fields
  budget      String?
  timeline    String?
  description String?
  notes       String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("service_requests")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum ServiceType {
  WEBSITE
  CONTENT_CREATION
  CONTENT_EDITING
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
